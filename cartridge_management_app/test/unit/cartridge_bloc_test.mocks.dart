// Mocks generated by Mockito 5.4.5 from annotations
// in cartridge_management_app/test/unit/cartridge_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:cartridge_management_app/data/models/cartridge_model.dart'
    as _i4;
import 'package:cartridge_management_app/data/repositories/cartridge_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CartridgeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartridgeRepository extends _i1.Mock
    implements _i2.CartridgeRepository {
  MockCartridgeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.CartridgeModel>> getAllCartridges() =>
      (super.noSuchMethod(
            Invocation.method(#getAllCartridges, []),
            returnValue: _i3.Future<List<_i4.CartridgeModel>>.value(
              <_i4.CartridgeModel>[],
            ),
          )
          as _i3.Future<List<_i4.CartridgeModel>>);

  @override
  _i3.Future<List<_i4.CartridgeModel>> getCartridgesWithDuplicates() =>
      (super.noSuchMethod(
            Invocation.method(#getCartridgesWithDuplicates, []),
            returnValue: _i3.Future<List<_i4.CartridgeModel>>.value(
              <_i4.CartridgeModel>[],
            ),
          )
          as _i3.Future<List<_i4.CartridgeModel>>);

  @override
  _i3.Future<List<_i4.CartridgeModel>> getChangeNowCartridges() =>
      (super.noSuchMethod(
            Invocation.method(#getChangeNowCartridges, []),
            returnValue: _i3.Future<List<_i4.CartridgeModel>>.value(
              <_i4.CartridgeModel>[],
            ),
          )
          as _i3.Future<List<_i4.CartridgeModel>>);

  @override
  _i3.Future<List<int>> getEmptySlots() =>
      (super.noSuchMethod(
            Invocation.method(#getEmptySlots, []),
            returnValue: _i3.Future<List<int>>.value(<int>[]),
          )
          as _i3.Future<List<int>>);

  @override
  _i3.Future<void> loadColorsFromApi() =>
      (super.noSuchMethod(
            Invocation.method(#loadColorsFromApi, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> insertCartridge(_i4.CartridgeModel? cartridge) =>
      (super.noSuchMethod(
            Invocation.method(#insertCartridge, [cartridge]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateCartridge(_i4.CartridgeModel? cartridge) =>
      (super.noSuchMethod(
            Invocation.method(#updateCartridge, [cartridge]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteCartridge(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCartridge, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> clearAll() =>
      (super.noSuchMethod(
            Invocation.method(#clearAll, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> isSlotOccupied(int? slot) =>
      (super.noSuchMethod(
            Invocation.method(#isSlotOccupied, [slot]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> resetToDefault() =>
      (super.noSuchMethod(
            Invocation.method(#resetToDefault, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateSlotOrder(List<_i4.CartridgeModel>? cartridges) =>
      (super.noSuchMethod(
            Invocation.method(#updateSlotOrder, [cartridges]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> syncFromRemote() =>
      (super.noSuchMethod(
            Invocation.method(#syncFromRemote, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> syncToRemote() =>
      (super.noSuchMethod(
            Invocation.method(#syncToRemote, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
